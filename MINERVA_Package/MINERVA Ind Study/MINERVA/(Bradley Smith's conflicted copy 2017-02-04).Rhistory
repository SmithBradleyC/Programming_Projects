item1<-make_instance(20)
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory)
memory
a <- matrix(1:5)
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-rbind(instance,NROW(memory))
add_to_memory<-function(instance,memory){
memory<-rbind(instance,NROW(memory))
return(memory)
}
item1<-make_instance(20)
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory)
memory
add_to_memory<-function(instance,memory){
memory<-rbind(memory,instance)
return(memory)
}
item1<-make_instance(20)
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
add_to_memory<-function(instance,memory){
memory<-rbind(memory,instance,make.row.names = F)
return(memory)
}
item1<-make_instance(20)
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory)
memory
a <- matrix(1:5)
a
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
add_to_memory<-function(instance,memory){
memory<-rbind(memory,instance)
row.names(memory)<-NULL
return(memory)
}
item1<-make_instance(20)
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
item1<-make_instance(20)
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
item1<-make_instance(20)
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
for (i in item1){
print(i)
}
item1<-make_instance()
2
item1<-make_instance(20)
item1<-make_instance(20)
item1
item1<-make_instance(20)
item1
make_instance<-function(num_items=20){
library(LaplacesDemon)
return(c((2*rbern(num_items,0.5)-1)))
}
item1<-make_instance()
item1
item1<-make_instance()
item1
item1<-make_instance(30)
item1
item1<-make_instance()
item1
memory<-matrix(item1,nrow = 1)
item1<-make_instance()
item1
memory<-matrix(item1,nrow = 1)
memory
add_to_memory(item1,memory)
memory
add_to_memory(item1,memory)
memory
add_to_memory(item1,memory)
item1<-make_instance()
item1
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory,.1)
memory
add_to_memory<-function(instance,memory,L=1){
# Forget each feature in an instance with probability 1-L
count<-1
for (i in instance){
instance[count]<-num*(rbern(1,L))
count<-count+1
}
memory<-rbind(memory,instance)
# avoid naming rows
row.names(memory)<-NULL
return(memory)
}
item1<-make_instance()
item1
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory,.1)
memory<-add_to_memory(item1,memory,.1)
add_to_memory<-function(instance,memory,L=1){
# Forget each feature in an instance with probability 1-L
count<-1
for (i in instance){
instance[count]<-i*(rbern(1,L))
count<-count+1
}
memory<-rbind(memory,instance)
# avoid naming rows
row.names(memory)<-NULL
return(memory)
}
item1<-make_instance()
item1
memory<-matrix(item1,nrow = 1)
memory
memory<-add_to_memory(item1,memory,.1)
memory
memory<-add_to_memory(item1,memory,.1)
memory
memory<-add_to_memory(item1,memory,.1)
memory
memory<-add_to_memory(item1,memory,.1)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-matrix()
memory
memory<-add_to_memory(item1,memory)
memory<-matrix(nrow = 20)
memory
memory<-add_to_memory(item1,memory)
memory<-matrix(ncol = 20)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-matrix(ncol = 20)
memory
nrow(memory)
memory<-matrix(ncol = 20)
memory
nrow(memory)
memory<-matrix(ncol = 20,nrow = 0)
memory
nrow(memory)
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory)
memory
memory<-add_to_memory(item1,memory,0.9)
memory
memory<-add_to_memory(item1,memory,0.9)
memory
memory<-add_to_memory(item1,memory,0.9)
memory
memory<-add_to_memory(item1,memory,0.9)
memory
memory<-add_to_memory(item1,memory,0.9)
memory
memory<-add_to_memory(item1,memory,0.9)
memory
initiate_memory<-function(){
memory<-matrix(ncol = 20,nrow = 0)
}
probe_matrix<-function(test_instances,
# assume just probing one but option to test several
num_instances_to_probe = 1){
return(matrix(test_instances,ncol = num_instances_to_probe))
}
item2<-make_instance()
item3<-make_instance()
probe<-probe_matrix(c(item1,item2,item3),3)
probe
divide_matrix<-function(memory,
probe,
num_items=20){
# make a matrix as large as the resulting intensities matrix and fill it with the max relevant n's
divide<-matrix(data = c(rep(num_items,(nrow(memory)*ncol(probe)))),byrow = TRUE,ncol = ncol(probe))
# for each probe
count_probe<-0
while (count_probe < ncol(probe)){
count_probe<-count_probe+1
# for each row in memory
count_row<-0
while (count_row < nrow(memory)){
count_row<-count_row+1
# for each item in that row in memory
count_col<-0
while (count_col < ncol(memory)){
count_col<-count_col+1
# if both the item in memory and the item in the probe are 0 then subtract 1 from the proper spot in the divide matrix
if (memory[count_row,count_col]==0){
if (probe[count_col,count_probe]==0){
divide[count_row,count_probe]<-divide[count_row,count_probe]-1
}
}
}
}
}
}
probe
memory
divide_matrix(memory,probe)
divide_m<-divide_matrix(memory,probe)
divide_m
return(divide)
divide_matrix<-function(memory,
probe,
num_items=20){
# make a matrix as large as the resulting intensities matrix and fill it with the max relevant n's
divide<-matrix(data = c(rep(num_items,(nrow(memory)*ncol(probe)))),byrow = TRUE,ncol = ncol(probe))
# for each probe
count_probe<-0
while (count_probe < ncol(probe)){
count_probe<-count_probe+1
# for each row in memory
count_row<-0
while (count_row < nrow(memory)){
count_row<-count_row+1
# for each item in that row in memory
count_col<-0
while (count_col < ncol(memory)){
count_col<-count_col+1
# if both the item in memory and the item in the probe are 0 then subtract 1 from the proper spot in the divide matrix
if (memory[count_row,count_col]==0){
if (probe[count_col,count_probe]==0){
divide[count_row,count_probe]<-divide[count_row,count_probe]-1
}
}
}
}
}
return(divide)
}
divide_m<-divide_matrix(memory,probe)
divide_m
probe
library(LaplacesDemon)
num_items<-20
num_distractors<-500
L<-0.75
item1_rep<-9
item2_rep<-6
item3_rep<-3
item1<-c((2*rbern(num_items,0.5)-1))
item2<-c((2*rbern(num_items,0.5)-1))
item3<-c((2*rbern(num_items,0.5)-1))
distractors<-c()
count<-1
repeat {
distractors<-c(distractors,(2*rbern(num_items,0.5)-1))
if (count == num_distractors) {
break}
count<-count+1
}
l_memory<-c(rep(item1,item1_rep),rep(item2,item2_rep),rep(item3,item3_rep),distractors)
count<-1
for (num in l_memory){
l_memory[count]<-num*(rbern(1,L))
count<-count+1
}
memory<-matrix(data = l_memory,ncol = num_items, byrow = TRUE)
probe<-matrix(c(item1,item2,item3,memory[item1_rep+item2_rep+item3_rep+1,],(2*rbern(num_items,0.5)-1),c(item1[1:(num_items/2)],rep(0,num_items/2))),ncol = 6)
memory
probe
_
divide_m<-divide_matrix(memory,probe)
probe
divide_m
memory
probe
memory
memory
probe
divide_m
memory
ncol(memory)
get_similarity<-function(memory,
probe,
divide = divide_matrix(memory,probe)){
# get the numerator of the similarity
similarity<-memory%*%probe
# divide each similarity numerator by the
count<-0
while (count < nrow(inten)*ncol(inten)){
count<-count+1
inten[count]<-inten[count]/divide[count]
}
#
}
get_similarity<-function(memory,
probe,
divide = divide_matrix(memory,probe)){
# get the numerator of the similarity
similarity<-memory%*%probe
# divide each similarity numerator by the denominator calculated in divide_matrix()
count<-0
while (count < nrow(inten)*ncol(inten)){
count<-count+1
inten[count]<-inten[count]/divide[count]
}
#
}
get_similarity(memory,probe)
get_similarity(memory,probe,divide)
divide
library(LaplacesDemon)
num_items<-20
num_distractors<-500
library(LaplacesDemon)
num_items<-20
num_distractors<-5
L<-0.75
item1_rep<-9
item2_rep<-6
item3_rep<-3
item1<-c((2*rbern(num_items,0.5)-1))
item2<-c((2*rbern(num_items,0.5)-1))
item3<-c((2*rbern(num_items,0.5)-1))
distractors<-c()
count<-1
repeat {
distractors<-c(distractors,(2*rbern(num_items,0.5)-1))
if (count == num_distractors) {
break}
count<-count+1
}
l_memory<-c(rep(item1,item1_rep),rep(item2,item2_rep),rep(item3,item3_rep),distractors)
count<-1
for (num in l_memory){
l_memory[count]<-num*(rbern(1,L))
count<-count+1
}
memory<-matrix(data = l_memory,ncol = num_items, byrow = TRUE)
probe<-matrix(c(item1,item2,item3,memory[item1_rep+item2_rep+item3_rep+1,],(2*rbern(num_items,0.5)-1),c(item1[1:(num_items/2)],rep(0,num_items/2))),ncol = 6)
inten_data<-colSums(((memory%*%probe/num_items)^3))
divide<-matrix(data = c(rep(num_items,(nrow(memory)*ncol(probe)))),byrow = TRUE,ncol = ncol(probe))
count_probe<-0
while (count_probe < ncol(probe)){
count_probe<-count_probe+1
# for each row in memory
count_row<-0
while (count_row < nrow(memory)){
count_row<-count_row+1
# for each item in that row in memory
count_col<-0
while (count_col < ncol(memory)){
count_col<-count_col+1
# if both the item in memory and the item in the probe are 0 then subtract 1 from the proper spot in the divide matrix
if (memory[count_row,count_col]==0){
if (probe[count_col,count_probe]==0){
divide[count_row,count_probe]<-divide[count_row,count_probe]-1
}
}
}
}
}
divide
get_similarity(memory,probe,divide)
get_similarity<-function(memory,
probe,
divide = divide_matrix(memory,probe)){
# get the numerator of the similarity
similarity<-memory%*%probe
print(similarity)
# divide each similarity numerator by the denominator calculated in divide_matrix()
count<-0
while (count < nrow(inten)*ncol(inten)){
count<-count+1
inten[count]<-inten[count]/divide[count]
}
#
}
get_similarity(memory,probe,divide)
get_similarity<-function(memory,
probe,
divide = divide_matrix(memory,probe)){
# get the numerator of the similarity
similarity<-memory%*%probe
print(similarity)
# divide each similarity numerator by the denominator calculated in divide_matrix()
count<-0
while (count < nrow(similarity)*ncol(similarity)){
count<-count+1
similarity[count]<-similarity[count]/divide[count]
}
#
}
get_similarity(memory,probe,divide)
get_similarity<-function(memory,
probe,
divide = divide_matrix(memory,probe)){
# get the numerator of the similarity
similarity<-memory%*%probe
# divide each similarity numerator by the denominator calculated in divide_matrix()
count<-0
while (count < nrow(similarity)*ncol(similarity)){
count<-count+1
similarity[count]<-similarity[count]/divide[count]
}
return(similarity)
}
similarity<-get_similarity(memory,probe,divide)
similarity
activation<-similarity^3
activation
.95^3
colSums(activation)
inten<-memory%*%probe
count<-0
while (count < nrow(inten)*ncol(inten)){
count<-count+1
inten[count]<-inten[count]/divide[count]
}
inten<-inten^3
inten_data<-colSums(inten)
inten_data
similarity<-get_similarity(memory,probe)
activation<-similarity^3
colSums(activation)
get_activation<-function(similarity = get_similarity(memory,probe,...)){
return(similarity^3)
}
get_activation()
get_activation(memory,probe)
get_activation(similarity)
colSums(get_activation(similarity))
[1] 4.4982500 3.2505000 1.2730000 0.8905928 0.0467500 0.8708224
colSums(get_activation(memory,probe))
get_activation<-function(memory = NULL,
probe = NULL,
similarity = get_similarity(memory,probe,...)){
print(memory)
return(similarity^3)
}
colSums(get_activation(memory,probe))
get_activation<-function(memory = NULL,
probe = NULL,
similarity = get_similarity(memory,probe,...)){
print(probe)
return(similarity^3)
}
colSums(get_activation(memory,probe))
get_activation<-function(memory = NULL,
probe = NULL,
similarity = get_similarity(memory,probe,...)){
print(similarity)
return(similarity^3)
}
colSums(get_activation(memory,probe))
get_activation<-function(memory = NULL,
probe = NULL,
similarity = get_similarity(memory,probe)){
print(similarity)
return(similarity^3)
}
colSums(get_activation(memory,probe))
[1] 4.4982500 3.2505000 1.2730000 0.8905928 0.0467500 0.8708224
colSums(get_activation(memory,probe))
get_activation<-function(memory = NULL,
probe = NULL,
similarity = get_similarity(memory,probe)){
return(similarity^3)
}
colSums(get_activation(memory,probe))
colSums(get_activation(similarity))
similarity
colSums(get_activation(similarity=similarity))
[1] 4.4982500 3.2505000 1.2730000 0.8905928 0.0467500 0.8708224
colSums(get_activation(memory,probe))
